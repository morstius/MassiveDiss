#version 330 core

// Input data

// Interpolated values from the vertex shaders
in vec2 uv;
in vec3 pos;
in vec3 normal;
in vec3 eyeDir;
in vec3 lightDir;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D texSampler;
uniform mat4 MV;
uniform vec3 LightPos;

void main()
{
	// light color and power settings
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 50.0f;
	
	// material properties
	vec3 LightBoost = vec3(2.5);
	vec3 diffusion = texture( texSampler, uv ).rgb * LightBoost;
	vec3 ambient = vec3(0.1,0.1,0.1) * diffusion;
	vec3 specular = vec3(0.3,0.3,0.3);

	// distance from vertex to the light
	float distance = length( LightPos - pos );

	// normalize normal
	vec3 n = normalize( normal );
	// normalize light direction
	vec3 l = normalize( lightDir );


	// dot product for the angle between normal and light direction
	float cosTheta = dot(n,l);
	// we want the intensity to be between 0 and 1
	float intensity = clamp(cosTheta, 0, 1);
	
	// normalize direction of the eye vector
	vec3 E = normalize(eyeDir);
	// get the direction of the reflection of the light vector
	vec3 R = reflect(-l,n);
	
	// dot product to get the angle between the eye vector and the reflection vector
	float cosAlpha = clamp(dot(E,R), 0, 1);
	
	float alpha = 5;

	color = ambient + 																	     //ambient color
			diffusion * LightColor * LightPower * intensity / (distance*distance) +		     //diffusion color
			specular * LightColor * LightPower * pow(cosAlpha,alpha) / (distance*distance);  //specular
}